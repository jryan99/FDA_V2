const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const app = express();
const db = new sqlite3.Database('./fdx.db');
app.use(express.json());
app.use(express.static('public'));
require('dotenv').config();


app.post('/api/create_link_token', async (req, res) => {
  try {
    const plaidResponse = await plaidClient.linkTokenCreate({
      user: { client_user_id: 'unique-user-id' },
      client_name: 'Openbank',
      products: ['auth', 'transactions'],
      country_codes: ['US'],
      language: 'en',
    });
    res.json({ link_token: plaidResponse.data.link_token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Get Customer data for the customeri
app.get('/customers/:customerId', (req, res) => {
  const customerId = req.params.customerId;
  db.get(
    'SELECT * FROM customers WHERE customer_id = ?',
    [customerId],
    (err, row) => {
      if (err) return res.status(500).json({ error: err.message });
      if (!row) return res.status(404).json({ error: 'Customer not found' });
      res.json(row);
    }
  );
});

// Get all accounts for a customer
app.get('/accounts', (req, res) => {
  const customerId = req.query.customerId;
  if (!customerId) return res.status(400).json({error: 'customerId required'});
  db.all(
    'SELECT * FROM accounts WHERE customer_id = ?',
    [customerId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({accounts: rows});
    }
  );
});

// Get account details by accountId
app.get('/accounts/:accountId', (req, res) => {
  const accountId = req.params.accountId;
  db.get(
    'SELECT * FROM accounts WHERE account_id = ?',
    [accountId],
    (err, row) => {
      if (err) return res.status(500).json({error: err.message});
      if (!row) return res.status(404).json({error: 'Account not found'});
      res.json(row);
    }
  );
});

// Get transactions for an account
app.get('/accounts/:accountId/transactions', (req, res) => {
  const accountId = req.params.accountId;
  db.all(
    'SELECT * FROM transactions WHERE account_id = ?',
    [accountId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({transactions: rows});
    }
  );
});

// Get contact info for an account
app.get('/accounts/:accountId/contact', (req, res) => {
  const accountId = req.params.accountId;
  db.all(
    'SELECT * FROM account_contacts WHERE account_id = ?',
    [accountId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({contacts: rows});
    }
  );
});

// Get payment networks for an account
app.get('/accounts/:accountId/payment-networks', (req, res) => {
  const accountId = req.params.accountId;
  db.all(
    'SELECT * FROM payment_networks WHERE account_id = ?',
    [accountId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({payment_networks: rows});
    }
  );
});

// Get statements for an account
app.get('/accounts/:accountId/statements', (req, res) => {
  const accountId = req.params.accountId;
  db.all(
    'SELECT * FROM statements WHERE account_id = ?',
    [accountId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({statements: rows});
    }
  );
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({status: 'FDA_V2  is running'});
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`FDA_V2 server running on port ${PORT}`);
});
const express = require('express');
