const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const app = express();
const db = new sqlite3.Database('./fdx.db');
require('dotenv').config();
app.use(express.json());

// --- Plaid client setup ---
const { Configuration, PlaidApi, PlaidEnvironments } = require('plaid');

const configuration = new Configuration({
  basePath: PlaidEnvironments.sandbox, // Change to .development or .production as needed
  baseOptions: {
    headers: {
      'PLAID-CLIENT-ID': process.env.PLAID_CLIENT_ID,
      'PLAID-SECRET': process.env.PLAID_SECRET,
      'Plaid-Version': '2020-09-14',
    },
  },
});

const plaidClient = new PlaidApi(configuration);

// --- Plaid endpoints ---

// Create a Plaid Link token (for Openbank)
app.post('/api/create_link_token', async (req, res) => {
  try {
    const plaidResponse = await plaidClient.linkTokenCreate({
      user: { client_user_id: 'unique-user-id' }, // Use a unique user id in production
      client_name: 'Openbank',
      products: ['auth', 'transactions'],
      country_codes: ['US'],
      language: 'en',
    });
    res.json({ link_token: plaidResponse.data.link_token });
  } catch (err) {
    console.error('Plaid link token creation error:', err.response?.data || err.message);
    res.status(500).json({ error: err.message });
  }
});

// Exchange Plaid public_token for access_token
app.post('/api/exchange_public_token', async (req, res) => {
  const { public_token } = req.body;
  if (!public_token) return res.status(400).json({ error: 'public_token required' });
  try {
    const plaidResponse = await plaidClient.itemPublicTokenExchange({ public_token });
    res.json({
      access_token: plaidResponse.data.access_token,
      item_id: plaidResponse.data.item_id,
    });
  } catch (err) {
    console.error('Plaid public token exchange error:', err.response?.data || err.message);
    res.status(500).json({ error: err.message });
  }
});

// --- Existing SQLite endpoints ---

// Get Customer data for the customer
app.get('/customers/:customerId', (req, res) => {
  const customerId = req.params.customerId;
  db.get(
    'SELECT * FROM customers WHERE customer_id = ?',
    [customerId],
    (err, row) => {
      if (err) return res.status(500).json({ error: err.message });
      if (!row) return res.status(404).json({ error: 'Customer not found' });
      res.json(row);
    }
  );
});

// Get all accounts for a customer
app.get('/accounts', (req, res) => {
  const customerId = req.query.customerId;
  if (!customerId) return res.status(400).json({error: 'customerId required'});
  db.all(
    'SELECT * FROM accounts WHERE customer_id = ?',
    [customerId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({accounts: rows});
    }
  );
});

// Get account details by accountId
app.get('/accounts/:accountId', (req, res) => {
  const accountId = req.params.accountId;
  db.get(
    'SELECT * FROM accounts WHERE account_id = ?',
    [accountId],
    (err, row) => {
      if (err) return res.status(500).json({error: err.message});
      if (!row) return res.status(404).json({error: 'Account not found'});
      res.json(row);
    }
  );
});

// Get transactions for an account
app.get('/accounts/:accountId/transactions', (req, res) => {
  const accountId = req.params.accountId;
  db.all(
    'SELECT * FROM transactions WHERE account_id = ?',
    [accountId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({transactions: rows});
    }
  );
});

// Get contact info for an account
app.get('/accounts/:accountId/contact', (req, res) => {
  const accountId = req.params.accountId;
  db.all(
    'SELECT * FROM account_contacts WHERE account_id = ?',
    [accountId],
    (err, rows) => {
      if (err) return res.status(500).json({error: err.message});
      res.json({contacts: rows});
    }
  );
});

// Serve static files (must be after API routes)
app.use(express.static('public'));

// Start server if run directly
if (require.main === module) {
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`FDA_V2 server running on port ${PORT}`);
  });
}

module.exports = app;

